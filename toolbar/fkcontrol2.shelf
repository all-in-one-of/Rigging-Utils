<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="fkcontrol2" label="FK Control 2" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[# Make FK controls - separate
# Select bone(s)
# click button
#################################
ctrlclick = kwargs["ctrlclick"]
shiftclick = kwargs["shiftclick"]
# get the bones
bonelist = hou.selectedNodes()
netparent = bonelist[0].parent()

selection = None
if hou.selectedNodes():
    selection = hou.selectedNodes()[0]
    selectname = selection.name()
    parent = selection.parent()
else:
    parent = cur_node
    selectname = kwargs['toolname']
    
choice = ()
choice = hou.ui.readInput(
    message = "Specify a prefix",
    initial_contents = selectname )

name = choice[1]


controlname =  name + '_ctrl'



# get the average length
length = 0.0
for bone in bonelist:
    fkcontrolname =  name + '_ctrl'
    fkautoname = name + '_auto'
    fkoffsetname = name + '_offset'
    length += bone.parm("length").eval()
    avglength = length/len(bonelist)
    ctrlsize = avglength * 2.0

    # set bone to "zyx" rotation order
    # this will catch bones not make with the
    # Bones Tool
    bone.parm("rOrd").set("zyx")
    
    ctrls = []
    # make offset
    fkoffset = netparent.createNode("null", fkoffsetname)
    fkoffset.setSelectableInViewport(False)
    fkoffset.parm("picking").set(0)
    fkoffset.setDisplayFlag(False)
    fkoffset.setFirstInput(bone)
    fkoffset.moveToGoodPosition()
    fkoffset.parm('keeppos').set(True)
    fkoffset.setFirstInput(None)
    fkoffset.parm("rOrd").set("zyx")
    for child in fkoffset.children():
        child.destroy()
    ctrls.append(fkoffset)
    
    # make auto
    fkauto = netparent.createNode("null", fkautoname)
    fkauto.setSelectableInViewport(False)
    fkauto.parm("picking").set(0)
    fkauto.setDisplayFlag(False)
    fkauto.setFirstInput(fkoffset)
    fkauto.moveToGoodPosition()
    fkauto.parm('keeppos').set(True)
    fkauto.parm("rOrd").set("zyx")
    for child in fkauto.children():
        child.destroy()
    ctrls.append(fkauto)    
    
    # make ctrl
    fkcontrol = netparent.createNode("null", fkcontrolname)
    fkcontrol.setFirstInput(fkauto)
    fkcontrol.moveToGoodPosition()
    fkcontrol.parm('keeppos').set(True)
    fkcontrol.parm("rOrd").set("zyx")
    fkcontrol.setColor(hou.Color([0.145, 0.667, 0.557]))
    ctrls.append(fkcontrol)
   
    # offset ctrl from pivot
    if shiftclick:
        bonelength = bone.parm("length").eval()
        fkcontrol.parm("tz").set(-bonelength/3)
        fkcontrol.parm("pz").set(bonelength/3)
    
    for ctrl in ctrls:
        ctrl.parm('controltype').set(1)
        ctrl.parm('geoscale').set(ctrlsize)
        ctrl.moveParmTransformIntoPreTransform()
        ctrl.parm('orientation').set(3)
    
        # Lock parameters so unexpected behavior isn't allowed
        value = 1
        ctrl.parmTuple('t').lock((value, value, value))
        ctrl.parmTuple('r').lock((value, value, value))
        ctrl.parmTuple('s').lock((value, value, value))
        ctrl.parmTuple('p').lock((value, value, value))
        ctrl.parm('scale').lock(value)
        
    value = 0
    fkcontrol.parmTuple('r').lock((value, value, value))]]></script>
  </tool>
</shelfDocument>
